# Определение функции knight_threat_with_move с двумя параметрами: our_knight и enemy_piece
def knight_threat_with_move(our_knight, enemy_piece):
    """
    Определяет, угрожает ли ваш конь фигуре соперника в текущем положении 
    или после одного хода коня.
    
    :param our_knight: Кортеж (буква, цифра) с координатами коня (например, ('b', 1))
    :param enemy_piece: Кортеж (буква, цифра) с координатами фигуры соперника
    :return: True если угрожает (сейчас или после хода), False если нет
    """
    # Создание словаря для преобразования буквенных координат в числовые (a=1, b=2, ..., h=8)
    letter_to_num = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}
    
    # Создание обратного словаря для преобразования числовых координат обратно в буквенные
    num_to_letter = {v: k for k, v in letter_to_num.items()}
    
    # Преобразование буквенной координаты X нашего коня в числовую
    x1 = letter_to_num[our_knight[0]]
    
    # Получение числовой координаты Y нашего коня (уже число)
    y1 = our_knight[1]
    
    # Преобразование буквенной координаты X фигуры соперника в числовую
    c = letter_to_num[enemy_piece[0]]
    
    # Получение числовой координаты Y фигуры соперника (уже число)
    d = enemy_piece[1]
    
    # Вычисление абсолютной разницы по координате X между конем и фигурой соперника
    dx_current = abs(x1 - c)
    
    # Вычисление абсолютной разницы по координате Y между конем и фигурой соперника
    dy_current = abs(y1 - d)
    
    # Проверка, находится ли фигура соперника под атакой коня в текущий момент
    current_threat = (dx_current == 1 and dy_current == 2) or (dx_current == 2 and dy_current == 1)
    
    # Если фигура уже под угрозой, возвращаем True
    if current_threat:
        return True
    
    # Список всех возможных ходов коня (8 вариантов движения)
    knight_moves = [
        (2, 1), (2, -1), (-2, 1), (-2, -1),
        (1, 2), (1, -2), (-1, 2), (-1, -2)
    ]
    
    # Перебор всех возможных ходов коня
    for move in knight_moves:
        # Вычисление новой координаты X после хода
        new_x = x1 + move[0]
        
        # Вычисление новой координаты Y после хода
        new_y = y1 + move[1]
        
        # Проверка, что новые координаты находятся в пределах шахматной доски (1-8)
        if 1 <= new_x <= 8 and 1 <= new_y <= 8:
            # Вычисление разницы по X между новой позицией коня и фигурой соперника
            dx_new = abs(new_x - c)
            
            # Вычисление разницы по Y между новой позицией коня и фигурой соперника
            dy_new = abs(new_y - d)
            
            # Проверка, будет ли фигура соперника под атакой после этого хода
            new_threat = (dx_new == 1 and dy_new == 2) or (dx_new == 2 and dy_new == 1)
            
            # Если будет под угрозой, возвращаем True
            if new_threat:
                return True
    
    # Если ни в текущей позиции, ни после любого хода конь не угрожает фигуре, возвращаем False
    return False

# Задание координат нашего коня (буква, цифра)
our_knight = ('b', 1)  # Конь на поле b1

# Задание координат фигуры соперника (буква, цифра)
enemy_piece = ('d', 2)  # Фигура соперника на поле d2

# Вызов функции для проверки угрозы
threat = knight_threat_with_move(our_knight, enemy_piece)

# Вывод результата проверки
print(f"Конь угрожает фигуре соперника (сейчас или после хода): {threat}")